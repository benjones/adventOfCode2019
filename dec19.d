const input = `109,424,203,1,21101,0,11,0,1105,1,282,21101,0,18,0,1106,0,259,2102,1,1,221,203,1,21102,31,1,0,1105,1,282,21101,38,0,0,1105,1,259,21001,23,0,2,21201,1,0,3,21101,0,1,1,21101,0,57,0,1106,0,303,1202,1,1,222,20102,1,221,3,21002,221,1,2,21101,259,0,1,21102,80,1,0,1106,0,225,21101,0,189,2,21102,91,1,0,1105,1,303,2102,1,1,223,20101,0,222,4,21102,259,1,3,21101,225,0,2,21102,225,1,1,21102,1,118,0,1105,1,225,21001,222,0,3,21102,1,57,2,21102,1,133,0,1106,0,303,21202,1,-1,1,22001,223,1,1,21102,148,1,0,1106,0,259,1202,1,1,223,21001,221,0,4,20101,0,222,3,21101,0,24,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,195,0,0,106,0,108,20207,1,223,2,20102,1,23,1,21102,-1,1,3,21101,0,214,0,1106,0,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,1201,-4,0,249,22101,0,-3,1,22101,0,-2,2,22102,1,-1,3,21102,250,1,0,1106,0,225,22101,0,1,-4,109,-5,2106,0,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2106,0,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,21201,-2,0,-2,109,-3,2105,1,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,21201,-2,0,3,21102,343,1,0,1105,1,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,21201,-4,0,1,21101,384,0,0,1106,0,303,1106,0,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,22102,1,1,-4,109,-5,2105,1,0`;

import cpu;

import std.stdio;
import std.algorithm;
import std.range;
import std.array;
import std.conv;

long[] insts = input.split(",").map!(to!long).array;

bool check(long x, long y){
    IOPort inp, outp;
    CPU cpu = CPU(insts.dup, inp, outp);
    
    inp ~= x;
    inp ~= y;
    cpu.run();
    return outp.front == 1;
}


void main(){



    int affected = 0;


    char[] grid;
    char[] grid2;
    foreach(y; 0..50){
        foreach(x; 0..50){
    
            IOPort inp, outp;
            CPU cpu = CPU(insts.dup, inp, outp);
            
            inp ~= x;
            inp ~= y;
            cpu.run();
            if(outp.front == 1){
                ++affected;
                grid ~= '#';
            } else {
                grid ~= '.';
            }
            if(check(x, y)){
                writeln("yes at ", x, ", ", y);
                grid2 ~= '#';
            } else {
                grid2~= '.';
            }
            
        }
    }
    writeln(affected);

    foreach(i, ch; grid){

        if(i % 50 == 0){
            writeln();
        }
        write(ch);
    }
    writeln();

    foreach(i, ch; grid2){

        if(i % 50 == 0){
            writeln();
        }
        write(ch);
    }
    writeln();



    
    long x = 0;
    long y = 8;

    while(true){
        if(check(x, y)){

            if(check(x +99, y - 99) && check(x +99, y) && check(x, y - 99)){
                writeln(x*10000 + y - 99);
                break;
            }
            
            ++y;
            
            if(y % 1000 == 0){
                writeln("row ", y);
            }
            
        } else {
            ++x;
        }
        
    }
    

    //    long minRow = 10;
    //    long maxRow = -1;

    //    while(true){
    /*    foreach(minRow; 50..100){
        long minCol = minRow;
        long maxCol = -1;

        //find first hash in the row

        while(true){
            if(outp.front == 1){
                maxCol = guess;
            } else {
                minCol = guess;
            }
            
        }
        writeln("first hash in row ", minRow, " is ", maxCol);
        
    }
    */
    
}
